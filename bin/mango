#!/usr/bin/env node
require('v8-compile-cache')

var checkError = require('../lib/helpers/checkerror')
var Config = require('../lib/helpers/config')
var log = require('better-console')
var Mango = require('../lib/mango')
var path = require('path')
var pkg = require('../package.json')
var program = require('commander')
var runcmd = require('../lib/helpers/runcmd')
var unique = require('../lib/helpers/unique')

program
	.version(pkg.version)

program
	.command('init [directory]')
	.description('initialize a new project')
	.option('-s, --source [git_repository]', 'Template repository to fork. Defaults to ' + pkg.config.default_fork_repo)
	.action(function init(directory, options) {
		var dir = path.resolve(process.cwd(), directory || '.')
		var mango = new Mango(dir)
		var source = options.source || pkg.config.default_fork_repo
		log.time('~ initialization time')

		mango.init(source, function(err) {
			log.timeEnd('~ initialization time')
			checkError(err)

			var config = new Config(dir).get()
			if(config.hooks && config.hooks.init) {
				log.info('~ init hook: ' + config.hooks.init)
				runcmd(config.hooks.init, dir, function() {
					log.info('/>')
				})
			} else {
				log.info('/>')
			}
		})
	})

program
	.command('install [packages...]')
	.alias('i')
	.description('NPM install of passed packages or dependencies specified in config')
	.action(function install(packages) {
		var dir = process.cwd()
		var config = new Config()
		var mainconfig = config.get(true)
		var fullconfig = config.get()

		var onFinish = function() {
			log.timeEnd('~ installation time')
			if(fullconfig.hooks && fullconfig.hooks.install) {
				log.info('~ install hook: ' + fullconfig.hooks.install)
				runcmd(fullconfig.hooks.install, null, function() {
					log.info('/>')
				})
			} else {
				log.info('/>')
			}
		}

		var doInstall = function() {
			log.time('~ installation time')
			// Install only passed packages and update mango.json
			if(packages.length > 0) {
				var _config = { dependencies: packages }
				var mango = new Mango(dir, _config)

				mango.install(function(err) {
					checkError(err)
					if(!mainconfig.dependencies) mainconfig.dependencies = []
					mainconfig.dependencies = unique(mainconfig.dependencies.concat(packages))
					config.save(mainconfig)
					onFinish()
				})
			}
			// Install packages specifies in mango.json
			else {
				var mango = new Mango(dir, fullconfig)
				mango.install(function(err) {
					checkError(err)
					onFinish()
				})
			}
		}


		// Run preinstall hook first
		if(fullconfig.hooks && fullconfig.hooks.preinstall) {
			log.info('~ preinstall hook: ' + fullconfig.hooks.preinstall)
			runcmd(fullconfig.hooks.preinstall, null, doInstall)
		}
		// Run immediately
		else {
			doInstall()
		}

	})

program
	.command('build [tasks...]')
	.alias('b')
	.description('build project assets for production')
	.option('--customConfig [customConfig]', 'Read the config from custom file')
	.option('--reuseBuildstamp', 'Reuse buildstamp from previous build')
	.option('--blacklistTasks <task>,<task>', 'Tasks not to run', function (tasks) {
		return tasks.split(',')
	}, [])
	.action(function build(tasks, options) {
		var config = new Config(null, options.customConfig).get(false, options.reuseBuildstamp)
		var mango = new Mango(process.cwd(), config)

		var doBuild = function() {
			log.time('~ compilation time')
			mango.build(tasks, options.blacklistTasks, function(err) {
				log.timeEnd('~ compilation time')
				checkError(err)
				if(config.hooks && config.hooks.build) {
					log.info('~ build hook: ' + config.hooks.build)
					runcmd(config.hooks.build, null, function() {
						log.info('/>')
					})
				} else {
					log.info('/>')
				}
			})
		}

		// Run prebuild hook first
		if(config.hooks && config.hooks.prebuild) {
			log.info('~ prebuild hook: ' + config.hooks.prebuild)
			runcmd(config.hooks.prebuild, null, doBuild)
		}
		// Run immediately
		else {
			doBuild()
		}

	})

program
	.command('dev')
	.alias('d')
	.description('start a development mode and watch for assets change')
	.option('-p, --proxy [http_proxy]', 'Proxy to a server instead of starting built-in')
	.action(function (options) {
		var config = new Config().get()
		var mango = new Mango(process.cwd(), config)

		var doDev = function() {
			mango.dev(options.proxy, function(err) {
				checkError(err)
				if(config.hooks && config.hooks.dev) {
					log.info('~ dev hook: ' + config.hooks.dev)
					runcmd(config.hooks.dev, null, function() {
						log.info('/>')
					})
				} else {
					log.info('/>')
				}
			})
		}

		// Run predev hook first
		if(config.hooks && config.hooks.predev) {
			log.info('~ predev hook: ' + config.hooks.predev)
			runcmd(config.hooks.predev, null, doDev)
		}
		// Run immediately
		else {
			doDev()
		}


	})

program.parse(process.argv)

if(program.args.length === 0) {
	program.help()
}
